// Create a new Group with policies atttached to it

provider "aws" {
  region = var.region
}

resource "aws_iam_group" "new_group" {
  name = "NewGroup"

  tags = {
    Name = "New Group"
  }
}

data "aws_iam_policy" "AWSIoTRuleActions" {
  arn = "arn:aws:iam::aws:policy/AWSIoTRuleActions"
}

data "aws_iam_policy" "AWSIoTLogging" {
  arn = "arn:aws:iam::aws:policy/service-role/AWSIoTLogging"
}

data "aws_iam_policy" "AWSIoTDataAccess" {
  arn = "arn:aws:iam::aws:policy/AWSIoTDataAccess"
}

data "aws_iam_policy" "AWSIoTConfigReadOnlyAccess" {
  arn = "arn:aws:iam::aws:policy/AWSIoTConfigReadOnlyAccess"
}

data "aws_iam_policy" "AmazonEKSClusterPolicy" {
  arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

data "aws_iam_policy" "AmazonTimestreamFullAccess" {
  arn = "arn:aws:iam::aws:policy/AmazonTimestreamFullAccess"
}

data "aws_iam_policy" "AmazonTimestreamConsoleFullAccess" {
  arn = "arn:aws:iam::aws:policy/AmazonTimestreamConsoleFullAccess"
}

resource "aws_iam_group_policy_attachment" "group_policies" {
  group      = aws_iam_group.new_group.name

  policy_arn = [
    data.aws_iam_policy.AWSIoTRuleActions.arn,
    data.aws_iam_policy.AWSIoTLogging.arn,
    data.aws_iam_policy.AWSIoTDataAccess.arn,
    data.aws_iam_policy.AWSIoTConfigReadOnlyAccess.arn,
    data.aws_iam_policy.AmazonEKSClusterPolicy.arn,
    data.aws_iam_policy.AmazonTimestreamFullAccess.arn,
    data.aws_iam_policy.AmazonTimestreamConsoleFullAccess.arn,
  ]
}

// Create new USers and add them to the Group

resource "aws_iam_user" "user1" {
  name = "User1"
}

resource "aws_iam_user" "user2" {
  name = "User2"
}

resource "aws_iam_user_group_membership" "user_group_membership_1" {
  user = aws_iam_user.user1.name
  groups = [
    aws_iam_group.new_group.name,
  ]
}

resource "aws_iam_user_group_membership" "user_group_membership_2" {
  user = aws_iam_user.user2.name
  groups = [
    aws_iam_group.new_group.name,
  ]
}
